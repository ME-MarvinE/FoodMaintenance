<Window
    x:Class="FoodMaintenance.MainWindow"
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:ViewModels="clr-namespace:FoodMaintenance.ViewModels"
    xmlns:Views="clr-namespace:FoodMaintenance.Views"
    xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
    xmlns:local="clr-namespace:FoodMaintenance"
    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
    Title="Food Maintenance"
    Width="800"
    Height="550"
    Background="{StaticResource MainBackgroundColorBrush}"
    Name="This"
    mc:Ignorable="d"
    WindowStyle="None"
    WindowState="{Binding WindowState}"
    WindowStartupLocation="CenterScreen">

    <Window.Style>
        <Style TargetType="{x:Type Window}" BasedOn="{StaticResource {x:Type Window}}">
            <Setter Property="BorderThickness" Value="0"/>
            <Style.Triggers>
                <DataTrigger Binding="{Binding WindowState}" Value="{x:Static WindowState.Maximized}">
                    <Setter Property="BorderThickness" Value="7"/>
                </DataTrigger>
            </Style.Triggers>
        </Style>
    </Window.Style>

    <WindowChrome.WindowChrome>
        <WindowChrome
            ResizeBorderThickness="12"
            CaptionHeight="25"
            CornerRadius="0"
            GlassFrameThickness="0"/>
    </WindowChrome.WindowChrome>

    <Grid>
        <Grid.Resources>
            <DataTemplate DataType="{x:Type ViewModels:DashboardViewModel}">
                <Views:DashboardView/>
            </DataTemplate>
            <DataTemplate DataType="{x:Type ViewModels:AddProductViewModel}">
                <Views:AddProductView/>
            </DataTemplate>
        </Grid.Resources>

        <Grid.RowDefinitions>
            <RowDefinition Height="30"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>

        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="0.3*"/>
            <ColumnDefinition Width="*"/>
        </Grid.ColumnDefinitions>

        <Grid Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="0" Background="{StaticResource TitleBarBackgroundColorBrush}">
            <Grid.Resources>
                <Style TargetType="{x:Type Button}">
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="WindowChrome.IsHitTestVisibleInChrome" Value="True"/>
                    <Setter Property="Width" Value="50"/>
                    <Setter Property="Padding" Value="9"/>
                    <Setter Property="Foreground" Value="White"/>

                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="Button">
                                <Border Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding VerticalAlignment, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ContentPresenter VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>

                    <Style.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonHoverColorBrush}"/>
                        </Trigger>

                        <Trigger Property="IsPressed" Value="True">
                            <Setter Property="Background" Value="{StaticResource WindowButtonPressedColorBrush}"/>
                        </Trigger>
                    </Style.Triggers>
                </Style>
            </Grid.Resources>

            <Grid.ColumnDefinitions>
                <ColumnDefinition Width="*"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
                <ColumnDefinition Width="Auto"/>
            </Grid.ColumnDefinitions>

            <TextBlock Grid.Column="0" Text="{Binding Title, ElementName=This}" Foreground="{StaticResource MainForegroundColorBrush}" FontSize="{x:Static SystemFonts.CaptionFontSize}" HorizontalAlignment="Left" VerticalAlignment="Center" Padding="15,0,0,0"/>

            <!--Minimize Button-->
            <Button Grid.Column="1" Command="{Binding ChangeWindowStateCommand}" CommandParameter="{x:Static WindowState.Minimized}">
                <Image Source="Images/white_minimize.png"/>
            </Button>
            <!--Maximize Button-->
            <Button Grid.Column="2" Command="{Binding ChangeWindowStateCommand}">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                        <Setter Property="CommandParameter" Value="{x:Static WindowState.Maximized}"/>
                        <Style.Triggers>
                            <DataTrigger Binding="{Binding WindowState}" Value="{x:Static WindowState.Maximized}">
                                <Setter Property="CommandParameter" Value="{x:Static WindowState.Normal}"/>
                            </DataTrigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
                <Image>
                    <Image.Style>
                        <Style TargetType="{x:Type Image}">
                            <Setter Property="Source" Value="Images/white_maximize.png"/>
                            <Style.Triggers>
                                <DataTrigger Binding="{Binding WindowState}" Value="{x:Static WindowState.Maximized}">
                                    <Setter Property="Source" Value="Images/white_restore.png"/>
                                </DataTrigger>
                            </Style.Triggers>
                        </Style>
                    </Image.Style>
                </Image>
            </Button>
            <!--Close Button-->
            <Button Grid.Column="3" Command="{Binding CloseWindowCommand}" CommandParameter="{x:Reference This}">
                <Button.Style>
                    <Style TargetType="{x:Type Button}" BasedOn="{StaticResource {x:Type Button}}">
                        <Style.Triggers>
                            <Trigger Property="IsMouseOver" Value="True">
                                <Setter Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="#C02A2A"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>

                            <Trigger Property="IsPressed" Value="True">
                                <Setter Property="Background">
                                    <Setter.Value>
                                        <SolidColorBrush Color="#F04A4A"/>
                                    </Setter.Value>
                                </Setter>
                            </Trigger>
                        </Style.Triggers>
                    </Style>
                </Button.Style>
                <Image Source="Images/white_close.png"/>
            </Button>
        </Grid>

        <StackPanel Grid.Column="0" Grid.Row="1" Background="{StaticResource MenuBarBackgroundColorBrush}">
            <StackPanel.Resources>
                <Style TargetType="{x:Type RadioButton}">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate TargetType="{x:Type RadioButton}">
                                <Border Padding="{Binding Padding, RelativeSource={RelativeSource TemplatedParent}}" Background="{Binding Background, RelativeSource={RelativeSource TemplatedParent}}" VerticalAlignment="{Binding VerticalAlignment, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{Binding HorizontalAlignment, RelativeSource={RelativeSource TemplatedParent}}">
                                    <ContentPresenter VerticalAlignment="{Binding VerticalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}" HorizontalAlignment="{Binding HorizontalContentAlignment, RelativeSource={RelativeSource TemplatedParent}}"/>
                                </Border>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                    <Setter Property="Background" Value="Transparent"/>
                    <Setter Property="Foreground" Value="{StaticResource MainForegroundColorBrush}"/>
                    <Setter Property="Padding" Value="25"/>
                    <Setter Property="Cursor" Value="Hand"/>
                    <Setter Property="VerticalContentAlignment" Value="Center"/>
                    <Setter Property="HorizontalContentAlignment" Value="Center"/>
                    <Setter Property="FontSize" Value="{StaticResource MediumFontSize}"/>

                    <Style.Triggers>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsMouseOver" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" Value="{StaticResource MenuBarButtonHoverBrush}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="IsPressed" Value="True"/>
                                <Condition Property="IsChecked" Value="False"/>
                            </MultiTrigger.Conditions>
                            <MultiTrigger.Setters>
                                <Setter Property="Background" Value="{StaticResource MenuBarButtonPressedBrush}"/>
                            </MultiTrigger.Setters>
                        </MultiTrigger>

                        <Trigger Property="IsChecked" Value="True">
                            <Setter Property="Background">
                                <Setter.Value>
                                    <LinearGradientBrush>
                                        <GradientStop Color="#00FFCF" Offset="0"/>
                                        <GradientStop Color="#00CFAF" Offset="1"/>
                                    </LinearGradientBrush>
                                </Setter.Value>
                            </Setter>
                            <Setter Property="Cursor" Value="Arrow"/>
                        </Trigger>

                    </Style.Triggers>
                </Style>

            </StackPanel.Resources>

            <RadioButton Command="{Binding ShowDashboardCommand}" Content="Dashboard" IsChecked="True"/>

            <RadioButton Command="{Binding ShowAddProductCommand}" Content="Add Product"/>

        </StackPanel>

        <ContentControl Grid.Column="1" Grid.Row="1" Content="{Binding CurrentViewModel}"/>

    </Grid>
</Window>
